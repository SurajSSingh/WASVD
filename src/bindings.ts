/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function transform(text: string) {
    return invoke()<InterpreterStructure>("transform", { text })
}

export type NumLocationKind = "Function" | "Global" | "Memory"
/**
 * All Wat types that can be serialized.
 * 
 * ## Limitations
 * All except [ValType::Ref] are supported, but must explicity convert.
 */
export type SerializableWatType = "I32" | "I64" | "F32" | "F64" | "V128"
export type InterpreterStructure = { name: string; exported: { [key: string]: [NumLocationKind, number] }; globals: string[]; memory: string[]; func: WastFunc[] }
/**
 * A basic Wa(s)t Function
 * 
 * ## Note:
 * Does not work with imported functions, as it assumes nothing about other modules
 */
export type WastFunc = { name: string | null; parameters: ([string | null, SerializableWatType])[]; locals: ([string | null, SerializableWatType])[]; body: string[]; result: SerializableWatType[] }
