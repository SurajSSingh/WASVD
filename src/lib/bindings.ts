/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function transform(text: string) {
    return invoke()<InterpreterStructure>("transform", { text })
}

/**
 * Memory Instructions
 */
export type DataInstruction = "GetLocal" | "GetGlobal" | "SetLocal" | "SetGlobal" | "TeeLocal" | "GetMemorySize" | "SetMemorySize"
export type SerializedInstructionTree = { root: SerializedInstructionNode[] }
/**
 * Comparison operations
 */
export type ComparisonOperation = "EqualZero" | "Equal" | "NotEqual" | "LessThenSigned" | "LessThenUnsigned" | "GreaterThenSigned" | "GreaterThenUnsigned" | "LessThenOrEqualToSigned" | "LessThenOrEqualToUnsigned" | "GreaterThenOrEqualToSigned" | "GreaterThenOrEqualToUnsigned"
export type MemoryData = { name: string; min: SerializedNumber; max: SerializedNumber; is_32: boolean; is_shared: boolean; data: number[] }
/**
 * Bitwise operations
 */
export type BitwiseOperation = "CountLeadingZero" | "CountTrailingZero" | "CountNonZero" | "And" | "Or" | "Xor" | "ShiftLeft" | "ShiftRightSigned" | "ShiftRightUnsigned" | "RotateLeft" | "RotateRight"
/**
 * Bitwise operations
 */
export type FloatOperation = "AbsoluteValue" | "Negation" | "Ceiling" | "Floor" | "Truncate" | "Nearest" | "SquareRoot" | "Minimum" | "Maximum" | "CopySign"
/**
 * All Wat types that can be (currently) serialized.
 * 
 * ## Limitations
 * All except [ValType::Ref] are supported, but must explicity convert.
 */
export type SerializableWatType = "I32" | "I64" | "F32" | "F64" | "V128"
export type GlobalData = { name: string; typ: SerializableWatType; is_mutable: boolean; val: SerializedNumber }
/**
 * Serialized instructions based on parts of [Instruction],
 * but is more generic over types (e.g. a single Add instruction that carries the type).
 */
export type SerializedInstruction = { Simple: SimpleInstruction } | { Block: { label: string; kind: BlockKind; inout: InputOutput | null } } | { Branch: { default_label: string; other_labels: string[]; is_conditional: boolean } } | { Call: { index: string; inout: InputOutput } } | { Data: { kind: DataInstruction; location: string } } | { Memory: { location: string; typ: SerializableWatType; count: ByteKind; offset: number; alignment: ByteKind; is_storing: boolean } } | { Const: { typ: SerializableWatType; value: SerializedNumber } } | { Comparison: { kind: ComparisonOperation; typ: SerializableWatType } } | { Arithmetic: { kind: ArithmeticOperation; typ: SerializableWatType } } | { Bitwise: { kind: BitwiseOperation; is_64_bit: boolean } } | { Float: { kind: FloatOperation; is_64_bit: boolean } } | { Cast: NumericConversionKind } | { DefaultString: string }
/**
 * Arithmetic operations
 */
export type ArithmeticOperation = "Addition" | "Subtraction" | "Multiplication" | "DivisonSigned" | "DivisonUnsigned" | "RemainderSigned" | "RemainderUnsigned"
/**
 * The kind of byte
 */
export type ByteKind = "Bits8" | "Bits16" | "Bits32" | "Bits64"
export type SerializedInstructionNode = { NonBlock: SerializedInstruction } | { SingleBlock: { label: string; inout: InputOutput; is_loop: boolean; inner_nodes: SerializedInstructionNode[] } } | { ConditionalBlock: { label: string; inout: InputOutput; then_nodes: SerializedInstructionNode[]; else_nodes: SerializedInstructionNode[] } }
/**
 * A basic Wa(s)t Function
 * 
 * ## Note:
 * Does not work with imported functions, as it assumes nothing about other modules
 */
export type WastFunc = { info: InputOutput; locals: ([string | null, SerializableWatType])[]; block: SerializedInstructionTree }
export type NumLocationKind = "Function" | "Global" | "Memory"
/**
 * Numeric Conversion Type
 */
export type NumericConversionKind = "WrapInt" | "SignedTruncF32ToI32" | "UnsignedTruncF32ToI32" | "SignedTruncF64ToI32" | "UnsignedTruncF64ToI32" | "SignedTruncF32ToI64" | "UnsignedTruncF32ToI64" | "SignedTruncF64ToI64" | "UnsignedTruncF64ToI64" | "SignedExtend" | "UnsignedExtend" | "SignedConvertI32ToF32" | "UnsignedConvertI32ToF32" | "SignedConvertI64ToF32" | "UnsignedConvertI64ToF32" | "SignedConvertI32ToF64" | "UnsignedConvertI32ToF64" | "SignedConvertI64ToF64" | "UnsignedConvertI64ToF64" | "DemoteFloat" | "PromoteFloat" | "Reinterpret32FToI" | "Reinterpret32IToF" | "Reinterpret64FToI" | "Reinterpret64IToF"
/**
 * Represents input and output of a block of instructions.
 * For functions, inputs are parameters and outputs are results.
 */
export type InputOutput = { index: string | null; input: ([string | null, SerializableWatType])[]; output: SerializableWatType[] }
export type InterpreterStructure = { name: string; exported: { [key: string]: [NumLocationKind, number] }; globals: GlobalData[]; memory: MemoryData[]; func: WastFunc[] }
/**
 * Simple Instructions
 */
export type SimpleInstruction = "Unreachable" | "Nop" | "Drop" | "Return"
export type SerializedNumber = { lower_bits: number; upper_bits: number }
/**
 * Control flow instructions
 */
export type BlockKind = "Block" | "If" | "Else" | "Loop" | "End"
